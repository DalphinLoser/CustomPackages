name: Update-Packages-Github

on:
  schedule:
  - cron: '0 0,12 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Set Global Variables and Create Log File
      run: |
        Add-Content -Path $env:GITHUB_ENV -Value "SCRIPTS_DIR=$env:GITHUB_WORKSPACE\scripts"
        Add-Content -Path $env:GITHUB_ENV -Value "PACKAGES_DIR=$env:GITHUB_WORKSPACE\packages"
        Add-Content -Path $env:GITHUB_ENV -Value "LOG_DIR=$env:GITHUB_WORKSPACE\logs"

        $logDir = "${env:LOG_DIR}"
        $logFile = Join-Path $logDir -ChildPath "$(Get-Date -Format 'yyyy-MM-dd').log"
        
        if (-not (Test-Path $logDir)) {
          Write-Host "Creating log directory: $logDir"
          New-Item -ItemType Directory -Path $logDir | Out-Null
        }
        if (-not (Test-Path $logFile)) {
          Write-Host "Creating log file: $logFile"
          New-Item -ItemType File -Path $logFile | Out-Null
        }
        Add-Content -Path $env:GITHUB_ENV -Value "LOG_FILE=$logFile"

      shell: pwsh
    
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (Chocolatey)
      run: |
        function Log-Message {
          param (
            [string]$Message,
            [string]$Type = "INFO", # Default type is INFO
          )
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $logEntry = "$timestamp [$Type] $Message"

          $logEntry | Out-File -Append -FilePath $Env:LOG_FILE
        }

        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Write-Host "Chocolatey is not installed. Installing now..."
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Host "Chocolatey failed to install. Exiting..."
            Log-Message "Chocolatey failed to install. Exiting..." -Type "ERROR"
            exit 1
          }
        }
      shell: pwsh

    - name: Update and Push Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        function Log-Message {
          param (
            [string]$Message,
            [string]$Type = "INFO", # Default type is INFO
            [System.Management.Automation.ErrorRecord]$ErrorRecord
          )
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $logEntry = "$timestamp [$Type] $Message"

          if ($ErrorRecord) {
            $logEntry += " ErrorRecord: $($ErrorRecord.Exception.Message), Category: $($ErrorRecord.CategoryInfo), ErrorID: $($ErrorRecord.FullyQualifiedErrorId)"
          }

          $logEntry | Out-File -Append -FilePath $Env:LOG_FILE
        }

        . "${{ env.SCRIPTS_DIR }}\auto-package-updates.ps1"
        
        try {
          Log-Message "Starting package updates"
          $updatedPackages = (Get-Updates -PackagesDir "${{ env.PACKAGES_DIR }}")
          
          if ($updatedPackages.Count -gt 0) {
            Log-Message "Found $($updatedPackages.Count) updated packages to push"
            Log-Message "Updated packages: $($updatedPackages -join ', ')"
            foreach ($packagePath in $updatedPackages) {
              Log-Message "Pushing package: $packagePath"
              if (Test-Path $packagePath) {
                try {
                  dotnet nuget push "$packagePath" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate
                  Log-Message "Successfully updated $packagePath"
                } catch {
                  Log-Message "Failed to push package: $packagePath" -Type "ERROR" -ErrorRecord $_
                }
              } else {
                Log-Message "Package path $packagePath not found." -Type "WARNING"
              }
            }
          } else {
            Log-Message "No updated packages to push." -Type "INFO"
          }
    
          Log-Message "Completed package updates"
        } catch {
          Log-Message "An error occurred while getting updates: $_" -Type "ERROR" -ErrorRecord $_
        }
      shell: pwsh

    - name: Commit and Push to GitHub
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add logs/
        git add icons/ 
        git add packages/*.nupkg
        git commit -m "Update packages and log" -a || echo "No changes to commit"
        git push origin ${{ github.ref }}
      shell: pwsh
