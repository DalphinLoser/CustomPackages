name: Create-Packages-Github

on:
  workflow_dispatch:
    inputs:
      repoUrls:
        description: 'List of GitHub Repository URLs or Direct Asset Download URLs separated by commas, spaces, or new lines'
        required: true

jobs:
  pre_process:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Generate Matrix
      id: set-matrix
      run: |
        matrix=$(echo -n '['; echo "${{ github.event.inputs.repoUrls }}" | tr ', ' '\n' | tr ',' '\n' | tr ' ' '\n' | sed '/^$/d' | sort -u | awk -vORS=',' '{ print "\""$0"\""}' | sed 's/,$//'; echo -n ']')
        echo "matrix=${matrix}" >> $GITHUB_OUTPUT  # Updated according to new guidelines  

  build:
    runs-on: windows-latest
    needs: pre_process
    strategy:
      fail-fast: false
      matrix:
        repoUrl: ${{fromJson(needs.pre_process.outputs.matrix)}}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Create and Checkout to Unique Local Branch
      run: |
        unique_branch="staging_$(echo "${{ matrix.repoUrl }}" | sed 's/[~^: /@*?]//g')"
        git checkout -b $unique_branch || exit 1
      shell: bash

    - name: Set Global Variables
      run: |
        echo "REPO_URL=${{ matrix.repoUrl }}" >> $GITHUB_ENV
        echo "ROOT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "SCRIPTS_DIR=$GITHUB_WORKSPACE\scripts" >> $GITHUB_ENV
      shell: bash

    - name: Install Chocolatey
      run: |
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) || exit 1
        }
      shell: pwsh

    - name: Create Package
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        . "${{ env.SCRIPTS_DIR}}\create-package-github.ps1" || exit 1
        Initialize-GithubPackage -InputUrl "${{ env.REPO_URL}}" || exit 1
      shell: pwsh

    - name: Commit and Push Changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
  
        # Identify existing pull requests for the branch
        existing_prs=$(gh pr list --state open --head "$unique_branch")

        # If an existing pull request is found, close it
        if [[ ! -z "$existing_prs" ]]; then
          pr_number=$(echo "$existing_prs" | awk '{print $1}')
          gh pr close "$pr_number" --comment "Closing PR as a new PR has been created for the same branch."
        fi

        # Commit and push changes
        git add . || exit 1
        git commit -m "Changes for ${{ matrix.repoUrl }}" || echo "No changes to commit"
        unique_branch="staging_$(echo "${{ matrix.repoUrl }}" | sed 's/[~^: /@*?]//g')"
        git push --set-upstream origin $unique_branch --force || exit 1
        
        # Create the PR and capture its number
        pr_output=$(gh pr create --title "Automated PR: $unique_branch" --body "This PR was automatically created by github-actions[bot]" --base ${{ github.event.repository.default_branch }} --head $unique_branch --label "auto gh-package" --fill)
        pr_number=$(echo "$pr_output" | grep -o -E '\/pull\/[0-9]+' | grep -o -E '[0-9]+')

        # If pr_numbers is empty, set it; otherwise, append
        if [[ -z "${pr_numbers:-}" ]]; then
          echo "pr_numbers=$pr_number" >> $GITHUB_ENV
        else
          echo "pr_numbers=${pr_numbers},${pr_number}" >> $GITHUB_ENV
        fi
        # Your shell script here
        shell: bash
    outputs:
      pr_numbers: ${{ env.pr_numbers }}

  post_process:
    needs: build  # Make sure to depend on the build job to get its outputs
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Auto-Merge Created PRs using gh pr merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBERS: ${{ needs.build.outputs.pr_numbers }}  # Get the output variable from build job
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
  
          git fetch --all
          git branch -a
  
          # Debug: List all open PRs
          echo "Listing all open PRs:"
          gh pr list --state open
  
          # Fetch PR numbers for specific label and debug
          pr_list_label=$(gh pr list --state open --label "auto gh-package")
          echo "Filtered PR list by label: $pr_list_label"

          # Convert comma-separated PR numbers into an array
          IFS=',' read -ra pr_array <<< "$PR_NUMBERS"

          # List all found PRs matching the PR numbers and label
          echo "Listing all PRs matching both the PR numbers and label:"
          for pr in "${pr_array[@]}"; do
            gh pr view $pr
          done
  
          # Loop through PR numbers and attempt to merge each
          for pr in "${pr_array[@]}"; do
            gh pr merge $pr --merge --auto || echo "Failed to merge PR #$pr"
          done
  
          git push -u origin main || exit 1
        shell: bash