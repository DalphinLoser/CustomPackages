name: Create-Packages-Github

on:
  workflow_dispatch:
    inputs:
      repoUrls:
        description: 'List of GitHub Repository URLs or Direct Asset Download URLs separated by commas, spaces, or new lines'
        required: true

jobs:
  pre_process:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Generate Matrix
      id: set-matrix
      run: |
        matrix=$(echo -n '['; echo "${{ github.event.inputs.repoUrls }}" | tr ', ' '\n' | tr ',' '\n' | tr ' ' '\n' | sed '/^$/d' | sort -u | awk -vORS=',' '{ print "\""$0"\""}' | sed 's/,$//'; echo -n ']')
        echo "matrix=${matrix}" >> $GITHUB_OUTPUT  # Updated according to new guidelines  
  build:
    runs-on: windows-latest
    needs: pre_process
    strategy:
      fail-fast: false
      matrix:
        repoUrl: ${{fromJson(needs.pre_process.outputs.matrix)}}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Create and Checkout to Unique Local Branch
      run: |
        unique_branch="staging_$(echo "${{ matrix.repoUrl }}" | sed 's/[~^: /@*?]//g')"
        git checkout -b $unique_branch || exit 1
      shell: bash

    - name: Set Global Variables
      run: |
        echo "REPO_URL=${{ matrix.repoUrl }}" >> $GITHUB_ENV
        echo "ROOT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "SCRIPTS_DIR=$GITHUB_WORKSPACE\scripts" >> $GITHUB_ENV
      shell: bash

    - name: Install Chocolatey
      run: |
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) || exit 1
        }
      shell: pwsh

    - name: Create Package
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        . "${{ env.SCRIPTS_DIR}}\create-package-github.ps1" || exit 1
        Initialize-GithubPackage -InputUrl "${{ env.REPO_URL}}" || exit 1
      shell: pwsh

    - name: Authenticate to GitHub Packages
      env:
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: dotnet nuget add source --username $Env:GITHUB_ACTOR --password $Env:GITHUB_TOKEN --store-password-in-clear-text --name github "https://nuget.pkg.github.com/$Env:REPOSITORY_OWNER/index.json"
      shell: pwsh
    
    - name: Publish to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NUGET_PACKAGE_PATH: "path/to/your/package.nupkg"
      run: dotnet nuget push "$Env:NUGET_PACKAGE_PATH" --api-key $Env:GITHUB_TOKEN --source "github"
      shell: pwsh
    
    - name: Commit and Push Changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
  
        unique_branch="staging_$(echo "${{ matrix.repoUrl }}" | sed 's/[~^: /@*?]//g')"

        # Identify existing pull requests for the branch
        existing_prs=$(gh pr list --state open --head "$unique_branch")
        echo "Listing all open PRs for the branch:"
        echo "Existing PRs: $existing_prs"

        # If an existing pull request is found, close it
        IFS=$'\n' read -ra prs <<< "$existing_prs"
        for pr_line in "${prs[@]}"; do
          pr_number=$(echo "$pr_line" | awk '{print $1}')
          gh pr close "$pr_number" --comment "Closing PR as a new PR has been created for the same branch."
        done        

        # Stage only changes in the packages and icons directories
        echo "Staging changes from packages and icons directories"
        git add packages/ || echo "No changes in packages directory to add"
        git add icons/ || echo "No changes in icons directory to add"

        # Commit and push changes
        echo "Committing and pushing changes to branch $unique_branch"
        git commit -m "Automatically Created: ${{ matrix.repoUrl }}" || echo "No changes to commit"
        echo "Pushing changes to branch $unique_branch"
        git push --set-upstream origin $unique_branch --force || exit 1
        echo "Pushed changes to branch $unique_branch"
        
        # Create the PR
        echo "Creating PR for branch $unique_branch"
        pr_output=$(gh pr create --title "Automated PR: $unique_branch" --body "This PR was automatically created by github-actions[bot]" --base ${{ github.event.repository.default_branch }} --head $unique_branch --label "auto gh-package" --fill)
        echo "Created PR: $pr_output"
      shell: bash

  post_process:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Auto-Merge Created PRs using gh pr merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Set Git user details
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Fetch all branches and list them
          git fetch --all
          git branch -a

          # List all open PRs for debugging
          echo "Listing all open PRs:"
          gh pr list --state open

          # Fetch PR numbers with a specific label and convert to an array
          pr_list_label=$(gh pr list --state open --label "auto gh-package" | awk -F'\t' '{print $1}')
          pr_array_label=($(echo "$pr_list_label"))
          echo "Debug: pr_array_label = ${pr_array_label[@]}"

          # Initialize an array to hold PRs that match both the label and the author
          pr_array=()

          # Fetch and update the main branch
          git checkout main
          git pull origin main

          # Loop through PRs with the specific label to fetch the author and check conditions
          for pr in "${pr_array_label[@]}"; do
            pr_author=$(gh pr view $pr --json author -q '.author.login')
            if [ "$pr_author" == "app/github-actions" ]; then
              pr_array+=($pr)

              # Fetch PR branch details
              pr_branch=$(gh pr view $pr --json headRefName -q '.headRefName')

              # Checkout the feature branch to get the commit hash
              git checkout $pr_branch

              # Since there's only one commit, we can get the latest commit hash
              commit_hash=$(git log -n 1 --pretty=format:"%H")

              # Checkout main and cherry-pick the commit
              git checkout main
              git cherry-pick $commit_hash

              # Check cherry-pick success and push and close PR
              if [ $? -eq 0 ]; then
                echo "Debug: PR #$pr changes have been cherry-picked. Pushing to main."
                git push origin main
                gh pr close $pr --comment "This PR has been automatically closed as the changes have been cherry-picked to main."
              else
                echo "Failed to cherry-pick changes for PR #$pr. Skipping."
              fi
            fi
          done
        shell: bash